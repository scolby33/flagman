# Tox (http://tox.testrun.org/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

[tox]
# add additional Python versions below
envlist =
    # always keep coverage-clean first
    coverage-clean
    # code linters/stylers
    dodgy
    flake8
    manifest
    mypy
    pyroma
    radon
    vulture
    xenon
    # documentation linters/checkers
    doc8
    readme
    docs
    # the actual tests
    py37
    # always keep coverage-report last
    coverage-report

[testenv]
deps =
    coverage
    pytest
commands = coverage run --parallel -m pytest tests {posargs}
description = Run pytest tests with coverage.

[testenv:coverage-clean]
deps = coverage
skip_install = true
commands = coverage erase
description = Erase previously collected coverage data.

[testenv:dodgy]
deps = dodgy
whitelist_externals = /bin/sh
skip_install = true
commands = /bin/sh tests/dodgy-wrapper.sh
description = Run the dodgy tool to check for "dodgy" code.

[testenv:flake8]
deps =
    flake8
    flake8-bandit
    flake8-colors
    flake8-docstrings
    flake8-import-order
    pep8-naming
skip_install = true
commands = flake8 src/flagman tests/
description = Run the flake8 tool with several plugins (bandit, docstrings, import order, pep8 naming).

[testenv:manifest]
deps = check-manifest
skip_install = true
commands = check-manifest
description = Run the check-manifest tool to make sure contents of the sdist and VCS match.

[testenv:mypy]
deps = mypy
skip_install = true
commands = mypy src/flagman
description = Run the mypy tool to check static typing on the project.

[testenv:pyroma]
deps =
    pygments
    pyroma
whitelist_externals = /bin/sh
skip_install = true
commands = /bin/sh tests/pyroma-wrapper.sh -d .
description = Run the pyroma tool to check the project's package friendliness.

[testenv:radon]
deps = radon
skip_install = true
commands = radon mi .
description = Run the radon tool to calculate the maintainability indices of the project sources.

[testenv:vulture]
deps = vulture
skip_install = true
commands = vulture src/flagman vulture_whitelist.py
description = Run the vulture tool to look for dead code.

[testenv:xenon]
deps = xenon
skip_install = true
commands = xenon --max-average A --max-modules A --max-absolute B .
description = Run the xenon tool to monitor code complexity.

[testenv:doc8]
deps =
    doc8
    pygments
skip_install = true
commands =  doc8 docs/source/ README.rst
description = Run the doc8 tool to check the style of the RST files in the project docs and the README.rst file.

[testenv:readme]
deps =
    restructuredtext-lint
    pygments
skip_install = true
commands = rst-lint README.rst
description = Check the README.rst file with rst-lint to make sure PyPI will parse it.

[testenv:docs]
changedir = docs
deps =
    sphinx
    sphinx-autodoc-typehints
    sphinx_rtd_theme
whitelist_externals =
    /bin/cat
    /bin/cp
    /bin/mkdir
#skip_install = true # TODO is this safe?
commands =
    /bin/mkdir -p {envtmpdir}
    /bin/cp -r source {envtmpdir}/source
    sphinx-build -W -b html -d {envtmpdir}/build/doctrees {envtmpdir}/source {envtmpdir}/build/html
    sphinx-build -W -b coverage -d {envtmpdir}/build/doctrees {envtmpdir}/source {envtmpdir}/build/coverage
    /bin/cat {envtmpdir}/build/coverage/c.txt
    /bin/cat {envtmpdir}/build/coverage/python.txt
description = Attempt to build the Sphinx docs.

[testenv:coverage-report]
deps = coverage
skip_install = true
commands =
    coverage combine
    coverage report
description = Combine coverage data from all test runs and report on the results.
